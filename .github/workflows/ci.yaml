name: CI

on: 
  push:
    branches:
      - master 

jobs:
  project-testing:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout Code
      - name: Code checkout
        uses: actions/checkout@v3

      # Step 2: Setup Python
      - name: Setup Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.11.5'

      # Step 3: Cache pip dependencies
      - name: Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      # Step 4: Install dependencies
      - name: Install dependencies
        run: |
          pip install -r requirements.txt

      # Step 5: Download NLTK Resources
      - name: Download NLTK Resources
        run: |
          python -m nltk.downloader vader_lexicon
          python -m nltk.downloader stopwords
          python -m nltk.downloader wordnet
          python -m nltk.downloader punkt

      # Step 6: Verify Environment Variables
      - name: Verify DAGSHUB_PAT
        run: echo "DAGSHUB_PAT is set"
        env:
          DAGSHUB_PAT: ${{ secrets.DAGSHUB_PAT }}

      # Step 7: Run DVC Pipeline with Debugging
      - name: Run pipeline with force
        env: 
          DAGSHUB_PAT: ${{ secrets.DAGSHUB_PAT }}
        run: |
          dvc repro --force

      # Step 8: Debug exp_info.json after repro
      - name: Debug exp_info.json after repro
        run: cat reports/exp_info.json || echo "exp_info.json does not exist"

      # # Step 9: Run Model Tests
      # - name: Run model tests 
      #   env:
      #     DAGSHUB_PAT: ${{ secrets.DAGSHUB_PAT }}
      #   run: |
      #     python -m unittest tests.test_model

      # # # Step 10: Debug exp_info.json after tests
      # - name: Debug exp_info.json after tests
      #   run: cat reports/exp_info.json || echo "exp_info.json does not exist"

      # # # Step 11: Promote Model to Production
      # - name: Promote model to production
      #   if: success()
      #   env:
      #     DAGSHUB_PAT: ${{ secrets.DAGSHUB_PAT }}
      #   run: python ./scripts/promote_model.py

      # # Step 12: Debug exp_info.json after promotion
      - name: Debug exp_info.json after promotion
        run: cat reports/exp_info.json || echo "exp_info.json does not exist"

       #Step 13: Run Flask App Tests
      - name: Run Flask app tests
        if: success()
        env:
          DAGSHUB_PAT: ${{ secrets.DAGSHUB_PAT }}
        run: python -m unittest tests.test_flask_app

      # Step 14: Upload exp_info.json as artifact
      - name: Upload exp_info.json as artifact
        uses: actions/upload-artifact@v3
        with:
          name: exp_info.json
          path: reports/exp_info.json
      
      # Removed exp_info.json